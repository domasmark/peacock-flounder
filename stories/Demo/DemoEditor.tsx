import React, { useState } from 'react';
import Button from '../../src/components/Button';
import { IconAlignCenter, IconAlignJustify, IconAlignLeft, IconAlignRight, IconArrowLeft, IconBold, IconChevronDown, IconChevronRight, IconCode, IconCopy, IconDot, IconGithub, IconItalic, IconLink, IconMinus, IconPlus, IconStrike } from '../../src/components/Icons';
import Input from '../../src/components/Input';
import Stack from '../../src/components/Stack/Stack';
import Grid from '../../src/components/Grid';
import Heading from '../../src/components/Heading';
import Text from '../../src/components/Text';

const layers = [
   { label: 'Layer 1' },
   { label: 'Layer 2' },
   { label: 'Layer 3' },
   { label: 'Layer 4' },
 ];

 const changes = [
   { label: 'Improved contrast', date: 'Today' },
   { label: 'Migrated to PostCSS V8', date: '2 hour ago' },
   { label: 'Lost keys', date: 'Yesterday' },
   { label: 'Initial code', date: 'January 20, 2023' },
];

const textAlignToggle = [
   { label: 'Align Left', icon: <IconAlignLeft/>, selected: true },
   { label: 'Align Center', icon: <IconAlignCenter/>, selected: false },
   { label: 'Align Right', icon: <IconAlignRight/>, selected: false },
   { label: 'Align Justified', icon: <IconAlignJustify/>, selected: false },
];

const inlineTextStyleControlBar = [
   { label: 'Bold', icon: <IconBold/>, selected: false },
   { label: 'Italic', icon: <IconItalic/>, selected: true },
   { label: 'Strikethrough', icon: <IconStrike/>, selected: false },
   { label: 'Code', icon: <IconCode/>, selected: false },
   { label: 'Link', icon: <IconLink/>, selected: false },
];

const textContent = (
   <>
      <Text secondary><strong>Disclaimer:</strong> the whole text is generated by AI</Text>
      <Heading as='h1' size='largest'>From Design to Code</Heading>
      <Heading as='div' size='large' secondary className='mb-8' >Learning to Build a Web Component Library with Chat GPT.</Heading>
      <Text as='p' className=' mt-3'>As a designer, Sarah had always been comfortable working in design software like Adobe Photoshop and Sketch. However, she had always struggled with coding. Whenever she had to code a design into a website, she would get frustrated and overwhelmed. Sarah knew that being able to code was a valuable skill, but she just couldn't seem to grasp it. That was until she discovered Chat GPT.</Text>
      <Heading as='h2' size='large' className='mt-8' >The Discovery of Chat GPT</Heading>
      <Text as='p' className=' mt-3'>One day, while browsing the internet for solutions to her coding problems, Sarah stumbled upon Chat GPT. She was amazed at how easy it was to communicate with the AI-powered language model. Sarah began to ask Chat GPT questions about coding, and the responses were always informative and easy to understand. With Chat GPT's help, Sarah started to make progress with coding.</Text>
      <Heading as='h2' size='large' className='mt-8' >Building a Web Component Library</Heading>
      <Text as='p' className=' mt-3'>With Chat GPT as her coding mentor, Sarah was able to learn how to build a web component library. She used her design skills to create visually stunning components, and then used Chat GPT's coding knowledge to bring them to life. Sarah was ecstatic when she saw her designs come to life on a webpage. Thanks to Chat GPT, Sarah was able to overcome her coding frustrations and take her design skills to the next level.</Text>
   </>
);

const Canvas = () => (
   <Stack area='canvas' variant='blank' vertical wFull hFull className="m-16">{textContent}</Stack>
);
const Header = () => {

   const [selectedTabIndex, setSelectedTabIndex] = useState(0);
   const handleTabClick = (index) => {
      setSelectedTabIndex(index);
   };
   const [buttons, setButtons] = useState(inlineTextStyleControlBar);
   const handleButtonClick = (index) => {
      const updatedButtons = [...buttons];
      updatedButtons[index].selected = !updatedButtons[index].selected;
      setButtons(updatedButtons);
   };

   return (
      <Stack area='topbar' as="header" alignItems="center" variant="card" border={{bottom:true}} wFull padding='small'>
         <Button variant='light' icon={<IconArrowLeft/>}  label='Back to All Projects'/>
         <Stack wFull alignItems='center' gap='small' justifyContent="center">
            <Stack variant='slip'>
               { textAlignToggle.map(((button, index) =>
                  <Button
                     key={index} 
                     selected={selectedTabIndex === index}
                     onClick={() => handleTabClick(index)}
                     variant="light"
                     labelPlacement='tooltip'
                     icon={button.icon}
                     label={button.label}
                  />
               ))}
            </Stack>
            <Stack gap="tiny">
            { inlineTextStyleControlBar.map(((button, index) =>
                  <Button
                     key={index}
                     onClick={() => handleButtonClick(index)}
                     selected={button.selected}
                     variant="light" labelPlacement='tooltip'
                     icon={button.icon}
                     label={button.label}
                  />
               ))}
            </Stack>
         </Stack>
         <Button variant="light" labelPlacement='start' label="Manage Versions"  icon={<IconChevronDown/>} />
         <Button variant="strong" labelPlacement='end'  icon={<IconGithub/>} label="Publish to Github" />
      </Stack>
   );
};

const DemoEditor = () => (
   <Grid cols='auto 1fr auto' rows='auto 1fr'
         areas={[['topbar', 'topbar', 'topbar'],
                 ['leftPanel', 'canvas', 'rightPanel'],
      ]}>
      <Header/>
      <Stack area='leftPanel' as="nav" variant="card" border={{right:true}} vertical hFull wMin="240px">
         <Input placeholder="Filter layers..."/>
         { layers.map(((layer) => <Button variant="transparent" icon={<IconChevronRight/>} label={layer.label} wFull />))}
      </Stack>
      <Stack hFull wFull className='overflow-scroll'><Canvas/></Stack>
      <Stack area='rightPanel' as="nav" variant="card" border={{left:true}} vertical hFull wMin="240px" >
         <Heading as="h2" size='small' secondary className='ml-2 my-2'>Version history</Heading>
         { changes.map((log =>
            <Button variant="transparent" icon={<IconDot/>} label={log.label} helpText={log.date} wFull />
         ))}
      </Stack>
   </Grid>
);

export default DemoEditor;